/*
  ================================================================
  Copyright (C) 2014 Robert D. Poor
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  ================================================================
*/

/*
 * PsiWaveform contains the data required to efficiencly implement PsiStream.
 * Concepturally, is offers two key methods:
 *   sample(t) - the waveform at time t (linearly interpolated)
 *   period(t) - the period of the waveform at time t (linearly interpolated)
 *
 * In addition, PsiWaveform has methods to load a .psi file, which is a text
 * file generated by utilities/psi_file_generator, and a library function to
 * access a cached .psi files.
 */

#ifndef MU_PSI_WAVEFORM_H
#define MU_PSI_WAVEFORM_H

#include "mu_types.h"
#include <unordered_map>

namespace mu {

  class PsiWaveform {
  public:

    typedef std::unordered_map<std::string, PsiWaveform *> PsiLibrary;

    // Return a PsiWaveform object, reading from a file or returning a cached
    // version if it has already been read.
    static PsiWaveform *lookup( std::string file_name );

    PsiWaveform( void );
    ~PsiWaveform( void );

    MuTick frame_count() { return sample_buffer_.frames(); }

    std::string file_name( void ) { return file_name_; }

  private:
    // Linear interpolate between two samples in buffer.  If tau is out of
    // range, return the first (or last) sample in the buffer.
    // 
    MuFloat lerp(MuFloat tau, MuBuffer *buffer) {
      int n_frames = buffer->frames();
      if (tau <= 0) {
        return (* buffer)[0];
      } else if (tau >= n_frames - 1) {
        return (* buffer)[n_frames - 1];
      } else {
        long int i = (long int)tau;
        double alpha = tau - i;
        MuFloat s0 = (* buffer)[i];
        MuFloat s1 = (* buffer)[i+1];
        return s0 + alpha * (s1 - s0);
      }
    }

  public:

    MuFloat get_sample( MuFloat tau ) {
      return lerp(tau, &sample_buffer_);
    }

    MuFloat get_period( MuFloat tau ) {
      return lerp(tau, &period_buffer_);
    }

  protected:
    static PsiLibrary library_;

    std::string file_name_;
    stk::StkFrames sample_buffer_;  // samples
    stk::StkFrames period_buffer_;  // period of sample_buffer_

  private:

    void initialize_from_file( std::string file_name );
    void read_psi_file(std::string file_name);

  }; // class PsiWaveform

} // namespace mu

#endif

// Local Variables:
// mode: c++
// End:
