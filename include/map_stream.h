/*
 * MapStream lets the user examine and (optionally) modify individual
 * frames generated by a source stream.  After fetching the data from
 * the source, MapStream calls a user-supplied method with the current
 * tick, stkFrames object, index into the stkFrames object and a
 * reference to the Player object.
 *
 * The user-supplied method may modify samples in place.  It can do
 * other things as well, such as print information about individual
 * frames and/or halt playback under certain conditions.
 */
/*
  ================================================================
  Copyright (C) 2014 Robert D. Poor
  
  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  ================================================================
*/

#ifndef MU_MAP_STREAM_H
#define MU_MAP_STREAM_H

#include "mu.h"
#include "single_source_stream.h"

namespace mu {

  typedef void (*MapStreamCallback)( stk::StkFrames& buffer, 
                                     Tick tick, 
                                     Player& player,
                                     Tick frame_index );
  
  class MapStream : public SingleSourceStream {
  public:

    // static const MapStreamCallback kDefaultCallback = NULL;

    MapStream( void );
    ~MapStream( void );

    std::string getClassName() { return "MapStream"; }

    MapStream& step(stk::StkFrames& buffer, Tick tick, Player &player);

    // needed(??) so setSource() returns a MapStream and not a SingleSourceStream
    MapStream& setSource(Stream *source) { source_ = source; return *this; }

    MapStreamCallback getCallback() const { return callback_; }
    MapStream& setCallback(MapStreamCallback callback) { callback_ = callback; return *this; }

  protected:
    MapStreamCallback callback_;

  };                            // class MapStream

}                               // namespace mu

#endif

// Local Variables:
// mode: c++
// End:
